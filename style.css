/* NOTE: This will set the order of Specificity if I uncomment  */
/* @layer reset, base, layout, components; */

@layer reset {
  /* NOTE: We use a reset so all browsers are on a level playing field */
  *,
  *::before,
  *::after {
    box-sizing: border-box; /* padding is included in the width */
  }

  /* https://kilianvalkhof.com/2022/css-html/your-css-reset-needs-text-size-adjust-probably/ */
  html {
    -moz-text-size-adjust: none;
    -webkit-text-size-adjust: none;
    text-size-adjust: none;
  }

  /* body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd { */
  * {
    margin: 0;
  }

  /* https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html */
  [role='list'] {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  body {
    min-block-size: 100vh; /* min-height */
    line-height: 1.6; /* default line height */
  }

  h1,
  h2,
  h3,
  button,
  input,
  label {
    line-height: 1.1;
  }

  h1,
  h2,
  h3,
  h4 {
    text-wrap: balance; /* helps with large text */
  }

  p,
  li {
    text-wrap: pretty; /* will never leave one word on a line by iteself with multi-line text */
  }

  img,
  picture {
    max-inline-size: 100%; /* max-width, inline = left to right */
    display: block;
  }

  input,
  button,
  textarea,
  select {
    font: inherit;
  }
}
/* NOTE: Any layer that comes after reset will be overridden, if I remove @layer reset, base, layout, components  */

@layer base {
  :root {
    /* --clr = color */
    /* Color Styles: light, regular (no prefix), dark  */
    --clr-dark-green: #11594f;
    --clr-beige: #f6f2e2;
    --clr-light-green: #e9eee2;
    --clr-red: #ff6242;
    --clr-white: #faf8f7;
    --clr-pink: #f8a290;
    --clr-grey: #3e3e3e;
    --clr-light-grey: #999;

    /* --ff = font family */
    --ff-heading: 'Outfit', sans-serif;
    --ff-body: 'Fira Sans', sans-serif;

    /* --fs = font size */
    /* NOTE: Categorized biggest to smallest */
    /* NOTE: Never use pixels for font sizes for accessabilty reasons */

    --fs-300: 0.875rem;
    --fs-400: 1rem;
    --fs-500: 1.125rem;
    --fs-600: 1.25rem;
    --fs-700: 1.5rem;
    --fs-800: 2rem;
    --fs-900: 3.75rem; /* NOTE: No difference on small screen sizes */
    --fs-1000: 3.75rem; /* NOTE: No difference on small screen sizes */

    @media (width > 760px) {
      /* NOTE: Larger screen sizes */
      /* NOTE: This is a nested media query inside the root selector */
      --fs-300: 0.875rem;
      --fs-400: 1rem; /* NOTE: Could remove the vars we are redeclaring with the same values */
      --fs-500: 1.25rem;
      --fs-600: 1.5rem;
      --fs-700: 2rem;
      --fs-800: 3rem;
      --fs-900: 5rem;
      --fs-1000: 7.5rem;
    }
  }

  /* Add another :root to fix VScode formatting issue */
  :root {
    --border-radius-1: 0.25rem;
    --border-radius-2: 0.5rem;
    --border-radius-3: 0.75rem;
  }

  :root {
    /* TO DO: CREATE SEMANIC FONT SIZE VARAIBLES AND ADD THEM TO THE CODE */
    /* NOTE: Put all semantic variables here, these will be what's used to style my elements, not my pimative vars. This is for readability, 'what is the purpose?' */
    --text-body: var(--clr-dark-green);
    --text-header: var(--clr-light-green);
    --text-header-focus: var(--clr-beige);

    --text-hero-title: var(--clr-light-green);
    --text-hero-description: var(--clr-light-green);

    --header-color: var(--clr-dark-green);
    --background-main-section: var(--clr-beige);
    --background-secondary-section: var(--clr-light-green);
    --background-secondary-section-offset: var(--clr-dark-green);

    --font-size-paragraph: var(--fs-300);
    --font-size-regular: var(--fs-700);
    --font-size-nav-menu-items: var(--fs-500);

    --equal-columns-gap: 1rem;

    --card-title-font-size: var(--font-size-heading);
    --card-title-color: var(--clr-light-grey);

    --button-primary-color: var(var(--clr-light-green));
  }

  /* TO DO: Create semantic variables for font sizes, border radius's */
  /* root ends */

  html {
    font-family: var(--ff-body);
    line-height: 1.6;
  }

  body {
    font-size: var(--font-size-regular);
    color: var(--text-body);
  }

  header {
    background-color: var(--header-color);
  }

  h1,
  h2,
  h3,
  h4 {
    font-family: var(--ff-heading);
  }

  p {
    font-size: var(--font-size-paragraph);
  }

  a {
    color: var(--text-header);
  }

  a:hover,
  a:focus-visible {
    /* NOTE: Prevents setting css on click bc an element gets focus on click, enables setting css when using keyboard nav to focus so a user can see where the focus is */
    /* TO DO: Change this to use semantic vars, this should probably be a grey */
    color: var(--text-header-focus);
  }
}

/* generic layout classes */
@layer layout {
  /* only selects elements that have a parent element */
  .flow > * + * {
    /* TO DO: create var for --flow-spacer */
    margin-top: var(--flow-spacer, 1em);
  }

  .grid-flow {
    display: grid;
    /* TO DO: create var for grid-flow-gap */
    gap: var(--grid-flow-gap, 1rem);
  }

  .equal-columns {
    display: grid;
    /* TO DO: create var for equal-columns-gap */
    gap: var(--equal-columns-gap, 1rem);

    @media (width > 760px) {
      grid-auto-flow: column;
      grid-auto-columns: 1fr;
      gap: var(--equal-columns-gap, 1rem);
    }
  }

  .section {
    --padding: 3.75rem;
    padding-block: var(--padding);

    @media (width > 760px) {
      --padding: 8rem;

      &[data-padding='compact'] {
        --padding: 4.5rem;
      }
    }
  }

  .wrapper {
    --wrapper-max-width: 1130px;

    max-width: var(--wrapper-max-width);
    /* sets margin left to right */
    margin-inline: auto;
    padding-inline: 1rem;
    /* reset this to the default, bc the max-width and padding-inline clash due to the css reset setting box-sizing to border-box */
    box-sizing: content-box;

    &[data-width='narrow'] {
      --wrapper-max-width: 720px;
    }

    &[data-width='wide'] {
      --wrapper-max-width: 1330px;
    }
  }

  /* these are examples of modifiers: -- denotes modifier */
  /* .wrapper--wide {

  }

  .wrapper--narrow {

  } */
}

/* one off pieces of css for individual components/elements */
@layer components {
  .skip-to-main:not(:focus) {
    position: absolute;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    white-space: nowrap;
    width: 1px;
  }

  .skip-to-main {
    position: absolute;
    top: 10px;
    left: 10px;
    background: var(--background-secondary-section);
    border-radius: var(--border-radius-2);
    color: var(--background-secondary-section-offset);
    padding: 0.5rem;
  }

  .site-header {
    padding-block: 1rem;
  }

  .site-header__layout {
    display: flex;
    gap: 0.5rem 1rem;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;

    h1 {
      color: var(--text-header);
    }
  }

  [aria-controls='primary-nav'] {
    display: none;
    z-index: 100;
    cursor: pointer;
    background: transparent;
    border: 0;
  }

  .header-navigation {
    ul {
      display: flex;
      gap: 0.5rem 1rem;
      flex-wrap: wrap;
      justify-content: space-between;
    }

    li {
      list-style-type: none;
    }

    a {
      text-decoration: none;
    }

    @media (width < 760px) {
      display: none;
      z-index: 10;
      position: absolute;
      top: 0;
      right: 0;
      font-size: var(--font-size-nav-menu-items);
      font-family: var(--ff-heading);
      background-color: var(--background-secondary-section);
      padding: 2rem;
      border-radius: 0 0 0 --border-radius-3;

      ul {
        gap: 0;
        flex-direction: column;
        color: var(--text-body);
        padding-inline-start: 0;
        padding-inline-end: 2.5rem;
      }

      li + li {
        margin-block-start: 1.5rem;
        padding-block-start: 1.5rem;
        border-top: 2px solid var(--clr-light-grey);
      }

      a {
        color: #3e3e3e;
      }
    }
  }

  /* set display to block when the element before .header-nagivation has aria-expanded set to true */
  @media (width < 760px) {
    [aria-controls='primary-nav'] {
      display: block;
    }

    [aria-expanded='true'] + .header-navigation {
      display: block;
    }
  }

  .hamburger {
    max-width: 25px;
    height: 25px;
    border-radius: 0;
  }

  /* TO DO: how do I set the size (height) of the hero? */
  .hero {
    text-align: center;
    font-size: var(--font-size-regular);
    color: var(--text-hero-title);
    background-image: url(assets/Navy_Bill_more_opaque.png);
    background-size: cover;
    background-position: center;
    backdrop-filter: contrast(0.5);
    /* height: 500px; */
  }

  .hero__title {
    font-size: var(--fs-900);
  }

  .hero__description {
    font-size: var(--fs-500);
  }

  .card {
    padding: 1rem;
    background-color: var(--clr-light-green);
    border-radius: var(--border-radius-3);

    img {
      border-radius: var(--border-radius-2);
    }
  }

  .card__layout {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;

    img {
      max-width: 100%;
      max-height: 25rem;
    }
  }

  .card__title {
    font-size: var(--card-title-font-size, var(--font-size-regular));
    color: var(--card-title-color, var(--clr-light-grey));
  }

  .button {
    text-decoration: none;
    cursor: pointer;
    display: inline-flex;
    padding: 0.5rem 1rem;
    background-color: var(--button-primary-color, --clr-light-green);
    font-size: var(--font-size-paragraph);
    font-family: var(--ff-heading);
    font-weight: 700;
    border-radius: var(--border-radius-2);
  }

  button:hover,
  button:focus-visible {
    color: var(--clr-beige);
    background-color: var(--clr-dark-green);
  }

  .site-footer {
    background-color: var(--background-main-section);
    padding-block: 2rem;
    display: grid;
    gap: 2rem;
  }
}

@layer utilities {
  /* could also be 'sr-only' (screen reader only), used to make sites accessible. Wrap descriptive text in a span and 'visually hide' it so screen readers pick it up */
  .visually-hidden {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  /* Turn semantic variables into utlility classes */
  /* Text-center */
  /* section-text */
}
